{"version":3,"sources":["components/LoadingSpinner.module.scss","App.module.scss","services/bungie-api.ts","App.tsx","services/bungie-auth.ts","constants.ts","components/CharacterDisplay.tsx","components/LoadingSpinner.tsx","components/MembershipSelect.tsx","services/utils.ts","serviceWorker.ts","index.tsx","components/CharacterDisplay.module.scss","components/MembershipSelect.module.scss"],"names":["module","exports","anchor","spinner","spin","loadingSpinnerContainer","spinnerLarge","spinnerSmall","status","App","loadingContainer","charactersContainer","characters","loadingStatus","cachedManifestData","getManifestPromise","characterDataRefreshTimer","bungieAuthedFetch","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","config","accessToken","headers","url","response","wrap","_context","prev","next","getAccessToken","x-api-key","BUNGIE_API_KEY","Authorization","concat","params","entries","map","_ref2","_ref3","slicedToArray","key","value","encodeURIComponent","fetch","sent","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","manifestPropertyWhitelist","getCachedManifestData","_ref4","_callee2","manifestData","_context2","log","get","getRemoteManifestData","_ref5","_callee3","manifest","version","manifestDataResponse","_context3","jsonWorldContentPaths","en","keys","forEach","includes","set","localStorage","setItem","_x2","getManifest","_ref6","_callee5","_context5","_callee4","localStorageManifestVersion","freshManifestData","_context4","getDestinyManifest","getItem","Response","window","location","search","undefined","getFullProfile","membershipType","membershipId","getProfile","components","destinyMembershipId","clearStorage","removeItem","handleTokenResponse","tokenResponse","data","tokenDuration","expiryTime","bungieMembershipId","destinyMembershipsResponse","destinyMemberships","_args","length","access_token","expires_in","Date","now","membership_id","toString","getMembershipDataById","JSON","stringify","setSelectedDestinyMembership","fetchAuthToken","authCode","body","cache","credentials","Content-Type","method","redirect","referrer","hasValidAuth","accessTokenExpiryTime","parseInt","getDestinyMemberships","destinyMembershipsString","parse","e","message","getSelectedDestinyMembership","destinyMembershipString","membership","auth","queryParams","URLSearchParams","replace","origin","pathname","ITEM_SLOT_BUCKETS","_ITEM_SLOT_BUCKETS","defineProperty","ITEM_BUCKET_SLOTS","reduce","buckets","slot","bucket","objectSpread","ORDERED_ITEM_SLOTS","ITEM_TYPE_ARMOR","ITEM_TYPE_WEAPON","CLASS_NAMES","Bar","min","max","avgValue","label","icon","range","perc","Math","floor","avgPerc","react_default","createElement","className","STYLES","barWrapper","iconWrapper","src","alt","barContainer","filledBar","style","width","barLine","left","CharacterDisplay","text","slotFullNames","chest","classItem","hunter","titan","warlock","energy","gloves","head","kinetic","legs","power","powerBySlot","slots","slotName","topItemBySlot","instanceData","primaryStat","overallPower","minItemPower","toConsumableArray","values","minPowerToDisplay","maxItemPower","maxPowerToDisplay","ceil","roundedPower","classnames","characterDisplay","backgroundColor","red","green","blue","rgbString","character","emblemColor","header","emblemBackground","emblemBackgroundPath","name","substr","toUpperCase","powerBars","powerRange","minPower","rangeLine","maxPower","bars","bestItem","CharacterDisplay_Bar","id","itemDefinition","displayProperties","powerLabel","indicator","LoadingSpinner","MembershipSelect","onMembershipSelect","PLATFORMS","1","2","4","membershipSelect","m","onClick","displayName","getPowerBySlot","itemsBySlot","mapValues","item","getOverallPower","sum","mergeItems","characterItemMap","allItems","characterItems","items","isItemEquippableByCharacter","canEquip","cannotEquipReason","equipRequiredLevel","baseCharacterLevel","getBasicCharacterData","pendingBasicProfile","profile","getDataForCharacterId","characterIds","characterData","classType","light","getCharacterData","setCharacterData","setIsFetchingCharacterData","returnBasicCharacterData","pendingManifest","destinyMembership","shouldSetBasicCharacterData","pendingBasicCharacterData","fullProfile","_characters","characterEquipments","characterInventories","profileInventories","itemInstances","allCharacterItems","allCharacterWeapons","_args3","catch","basicCharacterData","characterEquipment","profileInventory","itemComponents","instances","filter","i","itemHash","DestinyInventoryItemDefinition","itemType","mapAndFilterItems","itemInstanceId","inventory","bucketTypeHash","relevantProfileItems","getItemScore","score","isEquipped","getEquipLabel","equippingBlock","uniqueLabel","groupBy","maxBy","uniqueEquippedGroups","forIn","uniqueEquippedGroup","validItemCombinations","otherItems","otherItem","isCombinationValid","combination","nonExotics","push","bestCombination","sumBy","_x3","_useState","useState","_useState2","isAuthed","setIsAuthed","useEffect","doAuth","_useState3","_useState4","hasMembership","setHasMembership","_useState5","_useState6","hasManifestData","setHasManifestData","_useState7","_useState8","isFetchingCharacterData","_useState9","_useState10","doGetCharacterData","setInterval","onSelectMembership","components_MembershipSelect","c","components_CharacterDisplay","components_LoadingSpinner","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","platform_blizzard","platform_psn","platform_xbox"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,OAAA,+BAAAC,QAAA,gCAAAC,KAAA,6BAAAC,wBAAA,gDAAAC,aAAA,qCAAAC,aAAA,qCAAAC,OAAA,oDCAlBR,EAAAC,QAAA,CAAkBQ,IAAA,iBAAAC,iBAAA,8BAAAC,oBAAA,iCAAAC,WAAA,wBAAAC,cAAA,+FCuEdC,EACAC,ICrDAC,yFDTSC,EAAiB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAEvBN,EAAcQ,IACdP,EAAqC,CAAEQ,YAAaC,GACtDV,IACFC,EAAQU,cAAR,UAAAC,OAAkCZ,IAE9BE,EAPuB,GAAAU,OAOdb,EAAOG,KAPOU,OAQ3Bb,EAAOc,OACH,IACApB,OAAOqB,QAAQf,EAAOc,QAAQE,IAC5B,SAAAC,GAAA,IAAAC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAuB,EAAA,GAAEG,EAAFF,EAAA,GAAOG,EAAPH,EAAA,YAAAL,OACKS,mBAAmBF,GADxB,KAAAP,OACgCS,mBAC5BD,MAGN,IAhBuBf,EAAAE,KAAA,EAkBNe,MAAMpB,EAAK,CAAED,YAlBP,cAkBvBE,EAlBuBE,EAAAkB,KAAAlB,EAAAE,KAAA,GAmBhBJ,EAASqB,OAnBO,eAAAnB,EAAAoB,OAAA,SAAApB,EAAAkB,MAAA,eAAAlB,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,SAqB7BsB,QAAQC,MAARvB,EAAAqB,IArB6BrB,EAAAoB,OAAA,SAsBtB,IAtBsB,yBAAApB,EAAAwB,SAAA/B,EAAA,kBAAH,gBAAAgC,GAAA,OAAAtC,EAAAuC,MAAAC,KAAAC,YAAA,GAiCxBC,EAA4B,CAAC,kCAE7BC,EAAqB,eAAAC,EAAA3C,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwC,IAAA,IAAAC,EAAA,OAAA3C,EAAAC,EAAAQ,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAC5BoB,QAAQa,IAAI,kCADgBD,EAAAhC,KAAA,EAEDkC,YAVJ,iBAQK,cAEtBH,EAFsBC,EAAAhB,KAG5BI,QAAQa,IAAI,2CAHgBD,EAAAd,OAAA,SAIrBa,GAJqB,wBAAAC,EAAAV,SAAAQ,MAAH,yBAAAD,EAAAL,MAAAC,KAAAC,YAAA,GAOrBS,EAAqB,eAAAC,EAAAlD,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA+C,EAAOC,GAAP,IAAAC,EAAAC,EAAAT,EAAA,OAAA3C,EAAAC,EAAAQ,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,cACtBuC,EAAUD,EAASC,QACzBnB,QAAQa,IAAI,gCAFgBQ,EAAAzC,KAAA,EAGOe,MAAK,yBAAAV,OACbiC,EAASI,sBAAsBC,KAJ9B,cAGtBH,EAHsBC,EAAAzB,KAAAyB,EAAAzC,KAAA,EAMDwC,EAAqBvB,OANpB,cAMtBc,EANsBU,EAAAzB,KAO5BI,QAAQa,IAAI,yBACZ/C,OAAO0D,KAAKb,GAAcc,QAAQ,SAAAjC,GAC3Be,EAA0BmB,SAASlC,WAC/BmB,EAAanB,KAGxBQ,QAAQa,IAAI,gCAbgBQ,EAAAzC,KAAA,GActB+C,YA7BiB,gBA6BKhB,GAdA,eAe5BiB,aAAaC,QA/Bc,mBA+BgBV,GAffE,EAAAvB,OAAA,SAgBrBa,GAhBqB,yBAAAU,EAAAnB,SAAAe,MAAH,gBAAAa,GAAA,OAAAd,EAAAZ,MAAAC,KAAAC,YAAA,GAsBdyB,EAAW,eAAAC,EAAAlE,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA+D,IAAA,OAAAjE,EAAAC,EAAAQ,KAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cACpBlB,IACHA,EAAqBI,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAC,SAAAiE,IAAA,IAAAjB,EAAAkB,EAAAC,EAAA,OAAArE,EAAAC,EAAAQ,KAAA,SAAA6D,GAAA,cAAAA,EAAA3D,KAAA2D,EAAA1D,MAAA,cAAA0D,EAAA1D,KAAA,EACG2D,6BAAmB3E,GADtB,UACdsD,EADcoB,EAAA1C,KAEdwC,EAA8BR,aAAaY,QA1C1B,qBA8CrBtB,IACAA,EAASuB,UACTvB,EAASuB,SAAStB,UAAYiB,GAC7BM,OAAOC,SAASC,OAAOlB,SAAS,kBATf,CAAAY,EAAA1D,KAAA,YAWbnB,EAXa,CAAA6E,EAAA1D,KAAA,eAAA0D,EAAA1D,KAAA,EAYW4B,IAZX,OAYhB/C,EAZgB6E,EAAA1C,KAAA,cAAA0C,EAAAxC,OAAA,SAcXrC,GAdW,eAgBpBA,OAAqBoF,EAhBDP,EAAA1D,KAAA,GAiBYmC,EAAsBG,EAASuB,UAjB3C,eAiBdJ,EAjBcC,EAAA1C,KAkBpBnC,EAAqB4E,EAlBDC,EAAAxC,OAAA,SAmBbuC,GAnBa,yBAAAC,EAAApC,SAAAiC,KAADrE,IAFEoE,EAAApC,OAAA,SAwBlBpC,GAxBkB,wBAAAwE,EAAAhC,SAAA+B,MAAH,yBAAAD,EAAA5B,MAAAC,KAAAC,YAAA,GAqCXwC,EAAiB,SAACC,EAAwBC,GAAzB,OAC5BC,qBAAWrF,EAAmB,CAC5BsF,WAAY,CACV,IACA,IACA,IACA,IACA,KAEFC,oBAAqBH,EACrBD,oBEtHShE,EAET,mCAYEqE,EAAe,WACnBxB,aAAayB,WAPkB,qBAQ/BzB,aAAayB,WAPyB,+BAQtCzB,aAAayB,WAP0B,sBAQvCzB,aAAayB,WAPyB,sBAQtCzB,aAAayB,WAPwB,sBAmBjCC,EAAmB,eAAAzF,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAC1BoF,GAD0B,IAAAC,EAAAnF,EAAAoF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxD,UAAA,OAAAtC,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAkF,EAAAC,OAAA,QAAAlB,IAAAiB,EAAA,IAAAA,EAAA,GAI1B9D,QAAQa,IAAI,uBACZuC,IAC6B,MAAzBG,EAAcpG,OANQ,CAAAuB,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAOL2E,EAAc1D,OAPT,cAOlB2D,EAPkB9E,EAAAkB,KAQlBvB,EAAcmF,EAAKQ,aACnBP,EAAgBD,EAAKS,WACrBP,EAAaQ,KAAKC,MAAwB,IAAhBV,EAC1BE,EAAqBH,EAAKY,cAEhCxC,aAAaC,QApCgB,oBAoCkBxD,GAC/CuD,aAAaC,QApCuB,8BAsClC6B,EAAWW,YAEbzC,aAAaC,QAvCwB,qBAuCkB8B,GAlB/BjF,EAAAE,KAAA,GAqBiB0F,gCACvC1G,EACA,CAAEoF,aAAcW,EAAoBZ,eAAgB,MAvB9B,eAqBlBa,EArBkBlF,EAAAkB,KAyBlBiE,EACJD,EAA2BnB,SAASoB,mBACtCjC,aAAaC,QA/CuB,qBAiDlC0C,KAAKC,UAAUX,IAIiB,IAA9BA,EAAmBE,QACrBU,EAA6BZ,EAAmB,IAlC1BnF,EAAAoB,OAAA,SAqCjB,CAAEzB,gBArCe,yBAAAK,EAAAwB,SAAA/B,MAAH,gBAAAgC,GAAA,OAAAtC,EAAAuC,MAAAC,KAAAC,YAAA,GA2CnBoE,EAAc,eAAArF,EAAAvB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAwC,EAAOiE,GAAP,IAAApB,EAAA,OAAAvF,EAAAC,EAAAQ,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cACrBoB,QAAQa,IAAI,iBAAkB8D,GAC9BvB,IAFqBxC,EAAAhC,KAAA,EAGOe,MAvE5B,mDAuE0D,CACxDiF,KAAI,sCAAA3F,OAAwC0F,EAAxC,eAAA1F,OA1EyC,SA2E7C4F,MAAO,WACPC,YAAa,UACbxG,QAAS,CACPyG,eAAgB,qCAElBC,OAAQ,OACRC,SAAU,SACVC,SAAU,gBAZS,cAGf3B,EAHe3C,EAAAhB,KAAAgB,EAAAhC,KAAA,EAcR0E,EAAoBC,GAdZ,cAAA3C,EAAAd,OAAA,SAAAc,EAAAhB,MAAA,wBAAAgB,EAAAV,SAAAQ,MAAH,gBAAAoB,GAAA,OAAAzC,EAAAe,MAAAC,KAAAC,YAAA,GAiBPzB,EAAiB,WAC5B,OAAO+C,aAAaY,QApFW,sBAuFpB2C,EAAe,WAC1B,IAAM9G,EAAcQ,IACduG,EAAwBC,SAC5BzD,aAAaY,QAzFuB,gCAyFqB,KACzD,IAEImB,EAAqB/B,aAAaY,QA3FD,sBA8FvC,SACGnE,GACD6F,KAAKC,OAASiB,IACbzB,IAOQ2B,EAAwB,WACnC,IAAMC,EAA2B3D,aAAaY,QAxGR,sBA2GtC,IACE,GAAI+C,EACF,OAAOhB,KAAKiB,MAAMD,GAEpB,MAAOE,GACPzF,QAAQC,MAAR,oCAAmDwF,EAAEC,WAS5CC,EAA+B,WAC1C,IAAMC,EAA0BhE,aAAaY,QAzHR,qBA4HrC,IACE,GAAIoD,EACF,OAAOrB,KAAKiB,MAAMI,GAEpB,MAAOH,GACPzF,QAAQC,MAAM,mCAAoCwF,EAAEC,WAS3CjB,EAA+B,SAACoB,GAC3CjE,aAAaC,QA3IwB,oBA6InC0C,KAAKC,UAAUqB,KAINC,EAAI,eAAAxG,EAAAxB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA+C,IAAA,IAAA8E,EAAApB,EAAA,OAAA3G,EAAAC,EAAAQ,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,UACZmH,EAAc,IAAIC,gBAAgBtD,OAAOC,SAASC,UAClD+B,EAAWoB,EAAYjF,IAAI,UAEhBqE,IAJC,CAAA9D,EAAAzC,KAAA,eAKhBoB,QAAQa,IAAI,wCALIQ,EAAAzC,KAAA,EAMV8F,EAAeC,GANL,UASdA,GACFjC,OAAOC,SAASsD,QAAhB,GAAAhH,OACKyD,OAAOC,SAASuD,QADrBjH,OAC8ByD,OAAOC,SAASwD,YAI5ChB,MA3CKG,IA4BS,CAAAjE,EAAAzC,KAAA,eAAAyC,EAAAvB,OAAA,UAgBT,GAhBS,OAmBlBE,QAAQa,IACN,2GAEFuC,IAzJApD,QAAQa,IAAI,oBACZuC,IACAV,OAAOC,SAASsD,QANC,GAAAhH,OAnBgB,4CAmBhB,kCAAAA,OAlB8B,UAyJ7B,yBAAAoC,EAAAnB,SAAAe,MAAH,yBAAA3B,EAAAc,MAAAC,KAAAC,YAAA,0CCxJJ8F,GAAiBC,EAAA,GAAAvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EATG,UAUV,YADOvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EARE,SAUV,YAFQvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EAPC,QAUV,WAHSvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EANA,OAUV,YAJUvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EALE,SAUV,YALQvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EAJC,QAUV,UANSvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EAHA,OAUV,UAPUvI,OAAAwI,EAAA,EAAAxI,CAAAuI,EAFM,YAUV,YARIA,GAWjBE,EAAoBzI,OAAOqB,QAAQiH,GAAmBI,OACjE,SAACC,EAAD5I,GAAA,IAAAwB,EAAAvB,OAAAyB,EAAA,EAAAzB,CAAAD,EAAA,GAAW6I,EAAXrH,EAAA,GAAiBsH,EAAjBtH,EAAA,UAAAvB,OAAA8I,EAAA,EAAA9I,CAAA,GAAmC2I,EAAnC3I,OAAAwI,EAAA,EAAAxI,CAAA,GAA6C6I,EAASD,KACtD,IAgBWG,EAAkB,GAAA5H,OAbQ,CAzBN,UACD,SACD,SA4BM,CA3BP,OACE,SACD,QACD,OACM,cAsCvB6H,EAAkB,EAClBC,EAAmB,EAQnBC,EAAc,CAJA,QACC,SACC,2BC7BvBC,EAAM,SAAApJ,GAA0D,IAAvDqJ,EAAuDrJ,EAAvDqJ,IAAKC,EAAkDtJ,EAAlDsJ,IAAK1H,EAA6C5B,EAA7C4B,MAAO2H,EAAsCvJ,EAAtCuJ,SAAUC,EAA4BxJ,EAA5BwJ,MAAOC,EAAqBzJ,EAArByJ,KACzCC,EAAQJ,EAAMD,EACdM,EAAOC,KAAKC,OAAQjI,EAAQyH,GAAOK,EAAS,KAAQ,GACpDI,EAAUF,KAAKC,OAAQN,EAAWF,GAAOK,EAAS,KAAQ,GAGhE,OACEK,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOC,YACrBJ,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOE,aACpBX,GACCM,EAAA3J,EAAA4J,cAAA,OACEC,UAAWC,IAAOT,KAClBY,IAAG,yBAAAjJ,OAA2BqI,GAC9Ba,IAAKd,KAIXO,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOK,cACrBR,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOM,UAAWC,MAAO,CAAEC,MAAK,GAAAtJ,OAAKuI,EAAL,OAC9CI,EAAA3J,EAAA4J,cAAA,YAAOR,IAETO,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOS,QAASF,MAAO,CAAEG,KAAI,GAAAxJ,OAAK0I,EAAL,WAoHtCe,EA9GU,SAAArJ,GAAqC,IAtC3CsJ,EAsCSnF,EAAkCnE,EAAlCmE,KAMpBoF,EAA2C,CAC/CC,MAAO,cACPC,UAPgD,CAChDC,OAAQ,eACRC,MAAO,aACPC,QAAS,gBAIiBzF,EAAKsE,WAC/BoB,OAAQ,gBACRC,OAAQ,YACRC,KAAM,SACNC,QAAS,iBACTC,KAAM,YACNC,MAAO,gBAkBHC,EAAc3C,EAAmBL,OACrC,SAACiD,EAAOC,GAAR,OAAA5L,OAAA8I,EAAA,EAAA9I,CAAA,GACK2L,EADL3L,OAAAwI,EAAA,EAAAxI,CAAA,GAEG4L,EAAWlG,EAAKmG,cACbnG,EAAKmG,cAAcD,GAAUE,aAAaC,YAAYpK,MACtD+D,EAAKsG,gBAEX,IAIIC,EAAetC,KAAKP,IAAL9G,MAAAqH,KAAI3J,OAAAkM,EAAA,EAAAlM,CAAQA,OAAOmM,OAAOT,KACzCU,EAAoBzC,KAAKN,IACG,GAAhCM,KAAKC,MAAMqC,EAAe,IAAW,GACrC,GAEII,EAAe1C,KAAKN,IAAL/G,MAAAqH,KAAI3J,OAAAkM,EAAA,EAAAlM,CAAQA,OAAOmM,OAAOT,KACzCY,EAAoB3C,KAAKP,IAAmC,GAA/BO,KAAK4C,KAAKF,EAAe,IAAU,KAEhEG,EAAe7C,KAAKC,MAAMlE,EAAKsG,cAE/BvC,EAAQ6C,EAAoBF,EAC5B1C,EACJC,KAAKC,OAAQ4C,EAAeJ,GAAqB3C,EAAS,KAAQ,GAEpE,OACEK,EAAA3J,EAAA4J,cAAA,OACEC,UAAWyC,IACTxC,IAAOyC,iBACPzC,IAAM,SAAA9I,OAAUuE,EAAKsE,aAEvBQ,MAAO,CAAEmC,gBA9CK,SAAAnL,GAAA,IAChBoL,EADgBpL,EAChBoL,IACAC,EAFgBrL,EAEhBqL,MACAC,EAHgBtL,EAGhBsL,KAHgB,aAAA3L,OAQLyL,EARK,KAAAzL,OAQE0L,EARF,KAAA1L,OAQW2L,EARX,KA8CYC,CAAUrH,EAAKsH,UAAUC,eAEnDnD,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOiD,QACrBpD,EAAA3J,EAAA4J,cAAA,OACEC,UAAWC,IAAOkD,iBAClB/C,IAAG,yBAAAjJ,OAA2BuE,EAAKsH,UAAUI,sBAC7C/C,IAAI,KAENP,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOoD,OA7GZxC,EA6G6BnF,EAAKsE,WA5G9CsD,OAAO,EAAG,GAAGC,cAAgB1C,EAAKyC,OAAO,IA6GxCxD,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOwB,OAAQe,IAEjC1C,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOuD,WACrB1D,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOwD,YACrB3D,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOyD,UAAWtB,GAClCtC,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO0D,YACvB7D,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO2D,UAAWtB,IAEpCxC,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO4D,MACpB7N,OAAOqB,QAAQqK,GAAapK,IAAI,SAAAqB,GAAuB,IAAAO,EAAAlD,OAAAyB,EAAA,EAAAzB,CAAA2C,EAAA,GAArBiJ,EAAqB1I,EAAA,GAAXuI,EAAWvI,EAAA,GAChD4K,EAAWpI,EAAKmG,eAAiBnG,EAAKmG,cAAcD,GAC1D,OACE9B,EAAA3J,EAAA4J,cAACgE,EAAD,CACErM,IAAG,GAAAP,OAAKuE,EAAKsI,GAAV,KAAA7M,OAAgByK,GACnBxC,IAAKgD,EACL/C,IAAKiD,EACL3K,MAAO8J,EACPnC,SAAUkD,EACVjD,MAAK,GAAApI,OAAKsK,EAAL,KAAAtK,OAAc2J,EAAcc,IAAaA,GAC9CpC,KACEsE,GACAA,EAASG,gBACTH,EAASG,eAAeC,kBAAkB1E,UAMpDM,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOkE,YACrBrE,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOmE,UAAW5D,MAAO,CAAEG,KAAI,GAAAxJ,OAAKuI,EAAL,OAC5C8C,wBCpIE6B,EAZQ,SAAAtO,GAAqC,IAAlCV,EAAkCU,EAAlCV,OACxB,OACEyK,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO/K,yBACrB4K,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAOlL,QACrB+K,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO9K,eACvB2K,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO7K,eACvB0K,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO5K,QAASA,uBCkCzBiP,GArCU,SAAAvO,GAAmD,IAAhDwO,EAAgDxO,EAAhDwO,mBACpBxI,EAAqByB,IAE3B,IAAKzB,EACH,OAAO,KAGT,GAAkC,IAA9BA,EAAmBE,OACrB,OAAO6D,EAAA3J,EAAA4J,cAAA,sCAGT,IAAMyE,EAAuC,CAC3CC,EAAG,OACHC,EAAG,MACHC,EAAG,YAGL,OACE7E,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,IAAO2E,kBACpB7I,EAAmBzE,IAAI,SAAAuN,GACtB,OACE/E,EAAA3J,EAAA4J,cAAA,OACErI,IAAKmN,EAAE3J,aACP8E,UAAWyC,IACTxC,IAAOlC,WACPkC,IAAM,YAAA9I,OAAaqN,EAAUK,EAAE5J,mBAEjC6J,QAAS,kBAAMP,EAAmBM,KAEjCA,EAAEE,qHCZTC,GAAiB,SAACC,GAAD,OACrBC,KAAUD,EAAa,SAAAE,GAAI,OAAIA,EAAKrD,aAAaC,YAAYpK,SAEzDyN,GAAkB,SAAC1D,GAAD,OACtB1L,OAAOmM,OAAOT,GAAahD,OAAO,SAAC2G,EAAK5D,GAAN,OAAgB4D,EAAM5D,GAAO,GAC/DzL,OAAO0D,KAAK4E,GAAmBrC,QAE3BqJ,GAAa,SAGjBC,GAEA,OAAOvP,OAAOmM,OAAOoD,GAAkB7G,OACrC,SAAC8G,EAAUC,GAAX,OAA8BD,EAASrO,OAAOsO,EAAeC,QAC7D,KAIEC,GAA8B,SAClCR,EACAnC,GAEA,QAAKmC,EAAKrD,iBAGNqD,EAAKrD,aAAa8D,WAGsB,KAAxCT,EAAKrD,aAAa+D,qBAGlBV,EAAKrD,aAAagE,mBAAqB9C,EAAU+C,uBAOjDC,GAAqB,eAAAjQ,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAC5B4P,GAD4B,IAAAC,EAAAzQ,EAAA0Q,EAAAC,EAAAC,EAAA,OAAAnQ,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGNmP,EAHM,WAGtBC,EAHsBtP,EAAAkB,OAIXoO,EAAQvL,UAAauL,EAAQvL,SAASlF,WAJ3B,CAAAmB,EAAAE,KAAA,eAAAF,EAAAoB,OAAA,sBAOtBvC,EAAayQ,EAAQvL,SAASlF,WAAWiG,MAPnB,CAAA9E,EAAAE,KAAA,gBAUpBqP,EAAwB,SAACnC,GAC7B,IAAMhB,EAAYvN,EAAWuO,GAE7B,MAAO,CACLhB,YACAhD,UAHgBd,EAAY8D,EAAUsD,WAItCtC,KACAhC,aAAcgB,EAAUuD,QAItBH,EAAepQ,OAAO0D,KAAKjE,GAC3B4Q,EAAgBD,EAAa9O,IAAI,SAAA0M,GAAE,OAAImC,EAAsBnC,KAtBzCpN,EAAAoB,OAAA,SAuBnBqO,GAvBmB,yBAAAzP,EAAAwB,SAAA/B,MAAH,gBAAAgC,GAAA,OAAAtC,EAAAuC,MAAAC,KAAAC,YAAA,GA2BdgO,GAAgB,eAAAjP,EAAAvB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAA+C,EAC9BsN,EACAC,GAF8B,IAAAC,EAAAC,EAAAC,EAAAZ,EAAAa,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjO,EAAAkO,EAAAC,EAAApB,EAAAC,EAAAC,EAAAmB,EAAAhP,UAAA,OAAAtC,EAAAC,EAAAQ,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,cAG9B6P,EAH8Ba,EAAAvL,OAAA,QAAAlB,IAAAyM,EAAA,IAAAA,EAAA,GAAAjO,EAAA1C,KAAA,EAAA0C,EAAAzC,KAAA,EAMLkH,IANK,UAAAzE,EAAAzB,KAAA,CAAAyB,EAAAzC,KAAA,eAAAyC,EAAAvB,OAAA,oBAWtB4O,EAAkB3M,IAExByM,GAA2B,GAErBG,EAAoBhJ,IAfE,CAAAtE,EAAAzC,KAAA,gBAAAyC,EAAAvB,OAAA,yBAuBxB8O,GAA8B,EAE9BH,IPhBwB1L,EOkBxB4L,EAAkB5L,ePlB8BC,EOmBhD2L,EAAkB3L,cAFpB+K,EPhBJ9K,qBAAWrF,EAAmB,CAC5BsF,WAAY,CACV,IACA,KAEFC,oBAAqBH,EACrBD,oBOcsBwM,MAAM,cAGpBV,EAA4Bf,GAChCC,GACAwB,MAAM,SAAA9J,MAGR3H,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAC,SAAAwC,IAAA,IAAA8O,EAAA,OAAAxR,EAAAC,EAAAQ,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAAAgC,EAAAhC,KAAA,EACkCiQ,EADlC,QACOW,EADP5O,EAAAhB,OAE2BgP,GACxBL,EAAiBiB,GAHpB,wBAAA5O,EAAAV,SAAAQ,KAAD5C,IAtC0BuD,EAAAzC,KAAA,GA8CFkE,EACxB6L,EAAkB5L,eAClB4L,EAAkB3L,cAhDQ,WA8CtB8L,EA9CsBzN,EAAAzB,KAkD5B4O,GAA2B,GAGxBM,GACAA,EAAYrM,UACZqM,EAAYrM,SAASlF,YACrBuR,EAAYrM,SAASlF,WAAWiG,MAChCsL,EAAYrM,SAASgN,oBACrBX,EAAYrM,SAASgN,mBAAmBjM,MACxCsL,EAAYrM,SAASwM,sBACrBH,EAAYrM,SAASwM,qBAAqBzL,MAC1CsL,EAAYrM,SAASiN,kBACrBZ,EAAYrM,SAASiN,iBAAiBlM,MACtCsL,EAAYrM,SAASkN,gBACrBb,EAAYrM,SAASkN,eAAeC,WACpCd,EAAYrM,SAASkN,eAAeC,UAAUpM,KAjErB,CAAAnC,EAAAzC,KAAA,gBAAAyC,EAAAvB,OAAA,yBAsEtBvC,EAAauR,EAAYrM,SAASlF,WAAWiG,KAC7CwL,EAAsBF,EAAYrM,SAASgN,mBAAmBjM,KAC9DyL,EAAuBH,EAAYrM,SAASwM,qBAAqBzL,KACjE0L,EAAqBJ,EAAYrM,SAASiN,iBAAiBlM,KAC3D2L,EAAgBL,EAAYrM,SAASkN,eAAeC,UAAUpM,KA1ExCnC,EAAAzC,KAAA,GA4EL8P,EA5EK,WA4EtBxN,EA5EsBG,EAAAzB,KAAA,CAAAyB,EAAAzC,KAAA,gBAAAyC,EAAAvB,OAAA,kBAkFtBsP,EAAoBhC,GAAW6B,GAClChQ,OAAOmO,GAAW4B,IAClB/P,OAAOiQ,EAAmB1B,OACvB6B,EAAsBD,EAAkBS,OAAO,SAAAC,GACnD,IAAM/D,EACJ+D,EAAEC,UAAY7O,EAAS8O,+BAA+BF,EAAEC,UAC1D,OAAOhE,GAAkBA,EAAekE,WAAalJ,IAGjDkH,EAAwB,SAACnC,GAC7B,IAAMhB,EAAYvN,EAAWuO,GACvBhE,EAAYd,EAAY8D,EAAUsD,WAElC8B,EAAoB,SACxB1C,GADwB,OAGxBA,EACGpO,IAAI,SAAA6N,GACH,IAAMrD,EAAeqD,EAAKkD,eACtBhB,EAAclC,EAAKkD,qBACnBtN,EACEkJ,EACJ7K,EAAS8O,+BAA+B/C,EAAK8C,UAC/C,OAAOjS,OAAA8I,EAAA,EAAA9I,CAAA,GACFmP,EADL,CAEErD,eACAmC,qBAGH8D,OACC,SAAAC,GAAC,OACCA,EAAElG,cACFkG,EAAE/D,gBACF,CAACjF,EAAiBC,GAAkBrF,SAClCoO,EAAE/D,eAAekE,YAGtB7Q,IAAI,SAAA0Q,GAAC,OAAAhS,OAAA8I,EAAA,EAAA9I,CAAA,GACDgS,EADC,CAEJlG,aAAckG,EAAElG,aAChBmC,eAAgB+D,EAAE/D,mBAEnB3M,IAAI,SAAA0Q,GAAC,OAAAhS,OAAA8I,EAAA,EAAA9I,CAAA,GACDgS,EADC,CAEJpG,SACEnD,EAAkBuJ,EAAE/D,eAAeqE,UAAUC,oBAEhDR,OAAO,SAAAC,GAAC,OAAIrC,GAA4BqC,EAAGhF,MAE1CyC,EAAiB2C,EACrBjB,EAAqBnD,GAAI0B,MACtBvO,OAAO+P,EAAoBlD,GAAI0B,OAC/BvO,OAAOoQ,IAENiB,EAAuBJ,EAC3BhB,EAAmB1B,OACnBqC,OACA,SAAAC,GAAC,OACCA,EAAE/D,iBJzLkB,II0LnB+D,EAAE/D,eAAeqC,WAChB0B,EAAE/D,eAAeqC,YAActD,EAAUsD,aAGzCd,EAAWC,EAAetO,OAAOqR,GAEjCC,EAAe,SAACtD,GACpB,IAAIuD,EAAQvD,EAAKrD,aAAaC,YAAYpK,MAO1C,OANIwN,EAAKrD,aAAa6G,aACpBD,GAAS,IAEW,IAAlBvD,EAAKtK,WACP6N,GAAS,KAEJA,GAGHE,EAAgB,SAACzD,GAAD,OACpBA,EAAKlB,eAAe4E,eAAeC,aAG/B7D,EAAc8D,KAAQvD,EAAU,SAAAwC,GAAC,OAAIA,EAAEpG,WAEzCC,EAAgBqD,KAClBD,EACA,SAAAS,GAAK,OAAIsD,KAAMtD,EAAO+C,KAGlBQ,EAAuBF,KAC3B/S,OAAOmM,OAAON,GAAekG,OAAOa,GACpCA,GAGFM,KAAMD,EAAsB,SAAAE,GAC1B,KAAIA,EAAoBlN,QAAU,GAAlC,CAIA,IAAMmN,EAAsC,GA8B5C,GA5BAD,EAAoBxP,QAAQ,SAAAwL,GAC1B,IAAMkE,EAAaF,EAAoBpB,OACrC,SAAAuB,GAAS,OAAIA,IAAcnE,IAEzBoE,GAAqB,EACnBC,EAAWxT,OAAA8I,EAAA,EAAA9I,CAAA,GAAQ6L,GACzBwH,EAAW1P,QAAQ,SAAA2P,GAEjB,IAAMG,EAAaxE,EAAYqE,EAAU1H,UAAUmG,OACjD,SAAAC,GAAC,OAAKY,EAAcZ,KAElByB,EAAWxN,OAAS,EAEtBuN,EAAYF,EAAU1H,UAAYoH,KAChCS,EACAhB,GAIFc,GAAqB,IAGrBA,GACFH,EAAsBM,KAAKF,KAK3BJ,EAAsBnN,OAAS,EAAG,CACpC,IAAM0N,EAAkBX,KAAMI,EAAuB,SAAAI,GAAW,OAC9DI,KAAM5T,OAAOmM,OAAOqH,GAAcf,KAEpC5G,EAAgB8H,MAIpB,IAAMjI,EAAcsD,GAAenD,GAC7BG,EAAeoD,GAAgB1D,GAErC,MAAO,CACLsB,YACAhD,YACAgE,KACAhC,eACAH,kBAIEuE,EAAepQ,OAAO0D,KAAKjE,GAC3B4Q,EAAgBD,EAAa9O,IAAI,SAAA0M,GAAE,OAAImC,EAAsBnC,KACnE8C,GAA8B,EAC9BL,EAAiBJ,GAxOW9M,EAAAzC,KAAA,wBAAAyC,EAAA1C,KAAA,GAAA0C,EAAAtB,GAAAsB,EAAA,SA0O5BrB,QAAQC,MAAR,6CAAAoB,EAAAtB,IACAyO,GAA2B,GA3OCnN,EAAAvB,OAAA,mCAAAuB,EAAAnB,OPSD,IAAC6C,EAAwBC,GOTxB/B,EAAA,kBAAH,gBAAAa,EAAA6P,GAAA,OAAAtS,EAAAe,MAAAC,KAAAC,YAAA,gCNsBdlD,GA7FH,WAAM,IAAAwU,EACgBC,mBAAkB1M,KADlC2M,EAAAhU,OAAAyB,EAAA,EAAAzB,CAAA8T,EAAA,GACTG,EADSD,EAAA,GACCE,EADDF,EAAA,GAEhBG,oBAAU,WAOHF,GANO,eAAAlU,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,OAAAH,EAAAC,EAAAQ,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYkH,IADZ,OAAApH,EAAAkB,MAGXoS,GAAY,GAHD,wBAAAtT,EAAAwB,SAAA/B,MAAH,yBAAAN,EAAAuC,MAAAC,KAAAC,YAAA,EAOV4R,KAVY,IAAAC,EAc0BN,qBCmHjClM,KDjIOyM,EAAAtU,OAAAyB,EAAA,EAAAzB,CAAAqU,EAAA,GAcTE,EAdSD,EAAA,GAcME,EAdNF,EAAA,GAAAG,EAkB8BV,oBAAkB,GAlBhDW,EAAA1U,OAAAyB,EAAA,EAAAzB,CAAAyU,EAAA,GAkBTE,EAlBSD,EAAA,GAkBQE,EAlBRF,EAAA,GAmBhBP,oBAAU,WACRnU,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAC,SAAAwC,IAAA,OAAA1C,EAAAC,EAAAQ,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAAAgC,EAAAhC,KAAA,EACOmD,IADP,OAEC2Q,GAAmB,GAFpB,wBAAA9R,EAAAV,SAAAQ,KAAD5C,KApBc,IAAA6U,EA0B8Cd,oBAE5D,GA5Bce,EAAA9U,OAAAyB,EAAA,EAAAzB,CAAA6U,EAAA,GA0BTE,EA1BSD,EAAA,GA0BgBpE,EA1BhBoE,EAAA,GAAAE,EA6B0BjB,wBAExChP,GA/BckQ,EAAAjV,OAAAyB,EAAA,EAAAzB,CAAAgV,EAAA,GA6BT3E,EA7BS4E,EAAA,GA6BMxE,EA7BNwE,EAAA,GAgChBd,oBAAU,WACR,IAAMe,EAAqB,eAACvE,EAADnO,UAAAyD,OAAA,QAAAlB,IAAAvC,UAAA,IAAAA,UAAA,UACzBgO,GACEC,EACAC,EACAC,IAEAsD,GAAYM,IAAkBQ,IAC3BlV,IACHA,EAA4BsV,YAAYD,EAAoB,KAC5DA,GAAmB,MAGtB,CAACjB,EAAUM,EAAeI,EAAiBI,IAE9C,IAAMK,EAAqB,SAACrN,GAC1BpB,EAA6BoB,GAC7ByM,GAAiB,IAGfnV,EAAS,GAiBb,OAhBK4U,EAEOM,EAEAI,EAEAtE,GAA0C,IAAzBA,EAAcpK,SAEvC5G,EADE0V,EACO,6BAEA,qBALX1V,EAAS,oCAFTA,EAAS,4CAFTA,EAAS,oBAaVuF,OAAeyL,cAAgBA,EAE5BA,GAAiBA,EAAcpK,OAAS,EAExC6D,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,KAAO3K,KACrBwK,EAAA3J,EAAA4J,cAACsL,GAAD,CAAkB9G,mBAAoB6G,IACtCtL,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,KAAOzK,qBACrBsK,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,KAAOxK,YACpB4Q,EAAc/O,IAAI,SAAAgU,GAAC,OAClBxL,EAAA3J,EAAA4J,cAACwL,EAAD,CAAkB7T,IAAK4T,EAAEtH,GAAItI,KAAM4P,QAIxCjW,GAAUyK,EAAA3J,EAAA4J,cAACyL,EAAD,CAAgBnW,OAAQA,KAMvCyK,EAAA3J,EAAA4J,cAAA,OAAKC,UAAWC,KAAO3K,KACrBwK,EAAA3J,EAAA4J,cAACyL,EAAD,CAAgBnW,OAAQA,IACxByK,EAAA3J,EAAA4J,cAACsL,GAAD,CAAkB9G,mBAAoB6G,aOlGxBK,QACW,cAA7B7Q,OAAOC,SAAS6Q,UAEe,UAA7B9Q,OAAOC,SAAS6Q,UAEhB9Q,OAAOC,SAAS6Q,SAASC,MACvB,2DCZNC,IAASC,OAAO/L,EAAA3J,EAAA4J,cAAC+L,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCE1InBzX,EAAAC,QAAA,CAAkB4N,iBAAA,2CAAAQ,OAAA,iCAAAC,iBAAA,2CAAAE,KAAA,+BAAA5B,MAAA,gCAAA+B,UAAA,oCAAAC,WAAA,qCAAAE,UAAA,oCAAAQ,WAAA,qCAAAC,UAAA,oCAAAlE,WAAA,qCAAAC,YAAA,sCAAAX,KAAA,+BAAAc,aAAA,uCAAAI,QAAA,kCAAAH,UAAA,yDCAlB1L,EAAAC,QAAA,CAAkB8P,iBAAA,2CAAA7G,WAAA,qCAAAwO,kBAAA,4CAAAC,aAAA,uCAAAC,cAAA","file":"static/js/main.005dd1e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"anchor\":\"LoadingSpinner_anchor__3S34b\",\"spinner\":\"LoadingSpinner_spinner__2W4P9\",\"spin\":\"LoadingSpinner_spin__1qIkq\",\"loadingSpinnerContainer\":\"LoadingSpinner_loadingSpinnerContainer__2OZbs\",\"spinnerLarge\":\"LoadingSpinner_spinnerLarge__3zeAT\",\"spinnerSmall\":\"LoadingSpinner_spinnerSmall__25yaq\",\"status\":\"LoadingSpinner_status__33FO4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__4Taua\",\"loadingContainer\":\"App_loadingContainer__1uaFP\",\"charactersContainer\":\"App_charactersContainer__ht0bh\",\"characters\":\"App_characters__1pRqJ\",\"loadingStatus\":\"App_loadingStatus__34OS9\"};","import { get, set } from \"idb-keyval\";\n\nimport {\n  DestinyInventoryItemDefinition,\n  DestinyManifest,\n  getDestinyManifest,\n  getProfile,\n  HttpClientConfig\n} from \"bungie-api-ts/destiny2\";\nimport { BUNGIE_API_KEY, getAccessToken } from \"./bungie-auth\";\n\nexport const bungieAuthedFetch = async (config: HttpClientConfig) => {\n  try {\n    const accessToken = getAccessToken();\n    const headers: { [key: string]: string } = { \"x-api-key\": BUNGIE_API_KEY };\n    if (accessToken) {\n      headers.Authorization = `Bearer ${accessToken}`;\n    }\n    const url = `${config.url}${\n      config.params\n        ? \"?\" +\n          Object.entries(config.params).map(\n            ([key, value]) =>\n              `${encodeURIComponent(key)}=${encodeURIComponent(\n                value as string\n              )}`\n          )\n        : \"\"\n    }`;\n    const response = await fetch(url, { headers });\n    return await response.json();\n  } catch (e) {\n    console.error(e);\n    return {};\n  }\n};\n\nconst MANIFEST_VERSION_KEY = \"MANIFEST_VERSION\";\nconst MANIFEST_IDB_KEY = \"MANIFEST_DATA\";\ninterface ManifestData {\n  DestinyInventoryItemDefinition: {\n    [key: string]: DestinyInventoryItemDefinition | undefined;\n  };\n}\nconst manifestPropertyWhitelist = [\"DestinyInventoryItemDefinition\"];\n\nconst getCachedManifestData = async () => {\n  console.log(\"Loading manifest data from IDB\");\n  const manifestData = await get(MANIFEST_IDB_KEY);\n  console.log(\"Finished loading manifest data from IDB\");\n  return manifestData as ManifestData;\n};\n\nconst getRemoteManifestData = async (manifest: DestinyManifest) => {\n  const version = manifest.version;\n  console.log(\"Fetching fresh manifest data\");\n  const manifestDataResponse = await fetch(\n    `https://www.bungie.net${manifest.jsonWorldContentPaths.en}`\n  );\n  const manifestData = await manifestDataResponse.json();\n  console.log(\"Pruning manifest data\");\n  Object.keys(manifestData).forEach(key => {\n    if (!manifestPropertyWhitelist.includes(key)) {\n      delete manifestData[key];\n    }\n  });\n  console.log(\"Storing manifest data in IDB\");\n  await set(MANIFEST_IDB_KEY, manifestData);\n  localStorage.setItem(MANIFEST_VERSION_KEY, version);\n  return manifestData;\n};\n\nlet cachedManifestData: ManifestData | undefined;\nlet getManifestPromise: Promise<ManifestData> | undefined;\n\nexport const getManifest = async (): Promise<ManifestData> => {\n  if (!getManifestPromise) {\n    getManifestPromise = (async () => {\n      const manifest = await getDestinyManifest(bungieAuthedFetch);\n      const localStorageManifestVersion = localStorage.getItem(\n        MANIFEST_VERSION_KEY\n      );\n      if (\n        manifest &&\n        manifest.Response &&\n        manifest.Response.version === localStorageManifestVersion &&\n        !window.location.search.includes(\"updateManifest\")\n      ) {\n        if (!cachedManifestData) {\n          cachedManifestData = await getCachedManifestData();\n        }\n        return cachedManifestData;\n      }\n      cachedManifestData = undefined;\n      const freshManifestData = await getRemoteManifestData(manifest.Response);\n      cachedManifestData = freshManifestData;\n      return freshManifestData;\n    })();\n  }\n  return getManifestPromise;\n};\n\nexport const getBasicProfile = (membershipType: number, membershipId: string) =>\n  getProfile(bungieAuthedFetch, {\n    components: [\n      200, // DestinyComponentType.Characters,\n      205 // DestinyComponentType.CharacterEquipment,\n    ],\n    destinyMembershipId: membershipId,\n    membershipType\n  });\n\nexport const getFullProfile = (membershipType: number, membershipId: string) =>\n  getProfile(bungieAuthedFetch, {\n    components: [\n      200, // DestinyComponentType.Characters,\n      201, // DestinyComponentType.CharacterInventories,\n      205, // DestinyComponentType.CharacterEquipment,\n      102, // DestinyComponentType.ProfileInventories,\n      300 // DestinyComponentType.ItemInstances,\n    ],\n    destinyMembershipId: membershipId,\n    membershipType\n  });\n","import { UserInfoCard } from \"bungie-api-ts/user\";\nimport React, { useEffect, useState } from \"react\";\n\nimport {\n  auth,\n  hasSelectedDestinyMembership,\n  hasValidAuth,\n  setSelectedDestinyMembership\n} from \"./services/bungie-auth\";\nimport { CharacterData } from \"./types\";\n\nimport CharacterDisplay from \"./components/CharacterDisplay\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\nimport MembershipSelect from \"./components/MembershipSelect\";\nimport { getManifest } from \"./services/bungie-api\";\nimport { getCharacterData } from \"./services/utils\";\n\nimport \"normalize.css\";\nimport STYLES from \"./App.module.scss\";\n\nlet characterDataRefreshTimer: number | undefined;\n\nconst App = () => {\n  const [isAuthed, setIsAuthed] = useState<boolean>(hasValidAuth());\n  useEffect(() => {\n    const doAuth = async () => {\n      const authResult = await auth();\n      if (authResult) {\n        setIsAuthed(true);\n      }\n    };\n    if (!isAuthed) {\n      doAuth();\n    }\n  });\n\n  const [hasMembership, setHasMembership] = useState<boolean>(\n    hasSelectedDestinyMembership()\n  );\n\n  const [hasManifestData, setHasManifestData] = useState<boolean>(false);\n  useEffect(() => {\n    (async () => {\n      await getManifest();\n      setHasManifestData(true);\n    })();\n  });\n\n  const [isFetchingCharacterData, setIsFetchingCharacterData] = useState<\n    boolean\n  >(false);\n  const [characterData, setCharacterData] = useState<\n    CharacterData[] | undefined\n  >(undefined);\n  useEffect(() => {\n    const doGetCharacterData = (returnBasicCharacterData: boolean = false) =>\n      getCharacterData(\n        setCharacterData,\n        setIsFetchingCharacterData,\n        returnBasicCharacterData\n      );\n    if (isAuthed && hasMembership && !isFetchingCharacterData) {\n      if (!characterDataRefreshTimer) {\n        characterDataRefreshTimer = setInterval(doGetCharacterData, 10000);\n        doGetCharacterData(true);\n      }\n    }\n  }, [isAuthed, hasMembership, hasManifestData, isFetchingCharacterData]);\n\n  const onSelectMembership = (membership: UserInfoCard) => {\n    setSelectedDestinyMembership(membership);\n    setHasMembership(true);\n  };\n\n  let status = \"\";\n  if (!isAuthed) {\n    status = \"Authenticating...\";\n  } else if (!hasMembership) {\n    status = \"Waiting for Destiny platform selection...\";\n  } else if (!hasManifestData) {\n    status = \"Fetching Destiny item manifest...\";\n  } else if (!characterData || characterData.length === 0) {\n    if (isFetchingCharacterData) {\n      status = \"Fetching character data...\";\n    } else {\n      status = \"No character data\";\n    }\n  }\n\n  (window as any).characterData = characterData;\n\n  if (characterData && characterData.length > 0) {\n    return (\n      <div className={STYLES.App}>\n        <MembershipSelect onMembershipSelect={onSelectMembership} />\n        <div className={STYLES.charactersContainer}>\n          <div className={STYLES.characters}>\n            {characterData.map(c => (\n              <CharacterDisplay key={c.id} data={c} />\n            ))}\n          </div>\n        </div>\n        {status && <LoadingSpinner status={status} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={STYLES.App}>\n      <LoadingSpinner status={status} />\n      <MembershipSelect onMembershipSelect={onSelectMembership} />\n    </div>\n  );\n};\n\nexport default App;\n","import { getMembershipDataById, UserInfoCard } from \"bungie-api-ts/user\";\r\nimport { bungieAuthedFetch } from \"./bungie-api\";\r\n\r\nconst isDev = process.env.NODE_ENV === \"development\";\r\nexport const BUNGIE_API_KEY = isDev\r\n  ? \"f7f184669f044a89b560fc5f71ed5d60\"\r\n  : \"d94be1e34632448fafdaf77c7afbb501\";\r\nconst BUNGIE_OAUTH_AUTHORIZE_URL = \"https://www.bungie.net/en/OAuth/Authorize\";\r\nconst BUNGIE_OAUTH_CLIENT_ID = isDev ? \"26087\" : \"27213\";\r\nconst BUNGIE_OAUTH_TOKEN_URL =\r\n  \"https://www.bungie.net/platform/app/oauth/token/\";\r\n\r\nconst ACCESS_TOKEN_STORAGE_KEY = \"bungieAccessToken\";\r\nconst ACCESS_TOKEN_EXPIRY_STORAGE_KEY = \"bungieAccessTokenExpiryTime\";\r\nconst BUNGIE_MEMBERSHIP_ID_STORAGE_KEY = \"bungieMembershipId\";\r\nconst DESTINY_MEMBERSHIPS_STORAGE_KEY = \"destinyMemberships\";\r\nconst DESTINY_MEMBERSHIP_STORAGE_KEY = \"destinyMembership\";\r\n\r\nconst clearStorage = () => {\r\n  localStorage.removeItem(ACCESS_TOKEN_STORAGE_KEY);\r\n  localStorage.removeItem(ACCESS_TOKEN_EXPIRY_STORAGE_KEY);\r\n  localStorage.removeItem(BUNGIE_MEMBERSHIP_ID_STORAGE_KEY);\r\n  localStorage.removeItem(DESTINY_MEMBERSHIPS_STORAGE_KEY);\r\n  localStorage.removeItem(DESTINY_MEMBERSHIP_STORAGE_KEY);\r\n};\r\n\r\nconst getAuthUrl = () =>\r\n  `${BUNGIE_OAUTH_AUTHORIZE_URL}?response_type=code&client_id=${BUNGIE_OAUTH_CLIENT_ID}`;\r\n\r\nconst redirectToAuth = () => {\r\n  console.log(\"Redirect to auth\");\r\n  clearStorage();\r\n  window.location.replace(getAuthUrl());\r\n};\r\n\r\nconst handleTokenResponse = async (\r\n  tokenResponse: Response,\r\n  redirect: boolean = false\r\n) => {\r\n  console.log(\"handleTokenResponse\");\r\n  clearStorage();\r\n  if (tokenResponse.status === 200) {\r\n    const data = await tokenResponse.json();\r\n    const accessToken = data.access_token as string;\r\n    const tokenDuration = data.expires_in as number;\r\n    const expiryTime = Date.now() + tokenDuration * 1000;\r\n    const bungieMembershipId = data.membership_id as string;\r\n\r\n    localStorage.setItem(ACCESS_TOKEN_STORAGE_KEY, accessToken);\r\n    localStorage.setItem(\r\n      ACCESS_TOKEN_EXPIRY_STORAGE_KEY,\r\n      expiryTime.toString()\r\n    );\r\n    localStorage.setItem(BUNGIE_MEMBERSHIP_ID_STORAGE_KEY, bungieMembershipId);\r\n\r\n    // 254 = all memberships\r\n    const destinyMembershipsResponse = await getMembershipDataById(\r\n      bungieAuthedFetch,\r\n      { membershipId: bungieMembershipId, membershipType: 254 }\r\n    );\r\n    const destinyMemberships =\r\n      destinyMembershipsResponse.Response.destinyMemberships;\r\n    localStorage.setItem(\r\n      DESTINY_MEMBERSHIPS_STORAGE_KEY,\r\n      JSON.stringify(destinyMemberships)\r\n    );\r\n\r\n    // If there is only one membership, select it automatically\r\n    if (destinyMemberships.length === 1) {\r\n      setSelectedDestinyMembership(destinyMemberships[0]);\r\n    }\r\n\r\n    return { accessToken };\r\n  } else {\r\n    // return redirectToAuth()\r\n  }\r\n};\r\n\r\nconst fetchAuthToken = async (authCode: string) => {\r\n  console.log(\"fetchAuthToken\", authCode);\r\n  clearStorage();\r\n  const tokenResponse = await fetch(BUNGIE_OAUTH_TOKEN_URL, {\r\n    body: `grant_type=authorization_code&code=${authCode}&client_id=${BUNGIE_OAUTH_CLIENT_ID}`,\r\n    cache: \"no-cache\",\r\n    credentials: \"include\",\r\n    headers: {\r\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n    },\r\n    method: \"POST\",\r\n    redirect: \"follow\",\r\n    referrer: \"no-referrer\"\r\n  });\r\n  return await handleTokenResponse(tokenResponse);\r\n};\r\n\r\nexport const getAccessToken = () => {\r\n  return localStorage.getItem(ACCESS_TOKEN_STORAGE_KEY);\r\n};\r\n\r\nexport const hasValidAuth = () => {\r\n  const accessToken = getAccessToken();\r\n  const accessTokenExpiryTime = parseInt(\r\n    localStorage.getItem(ACCESS_TOKEN_EXPIRY_STORAGE_KEY) || \"-1\",\r\n    10\r\n  );\r\n  const bungieMembershipId = localStorage.getItem(\r\n    BUNGIE_MEMBERSHIP_ID_STORAGE_KEY\r\n  );\r\n  if (\r\n    !accessToken ||\r\n    Date.now() >= accessTokenExpiryTime ||\r\n    !bungieMembershipId\r\n  ) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const getDestinyMemberships = () => {\r\n  const destinyMembershipsString = localStorage.getItem(\r\n    DESTINY_MEMBERSHIPS_STORAGE_KEY\r\n  );\r\n  try {\r\n    if (destinyMembershipsString) {\r\n      return JSON.parse(destinyMembershipsString) as UserInfoCard[];\r\n    }\r\n  } catch (e) {\r\n    console.error(`Error loading destiny memberships`, e.message);\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const hasDestinyMemberships = () => {\r\n  return !!getDestinyMemberships();\r\n};\r\n\r\nexport const getSelectedDestinyMembership = () => {\r\n  const destinyMembershipString = localStorage.getItem(\r\n    DESTINY_MEMBERSHIP_STORAGE_KEY\r\n  );\r\n  try {\r\n    if (destinyMembershipString) {\r\n      return JSON.parse(destinyMembershipString) as UserInfoCard;\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error loading destiny membership\", e.message);\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const hasSelectedDestinyMembership = () => {\r\n  return !!getSelectedDestinyMembership();\r\n};\r\n\r\nexport const setSelectedDestinyMembership = (membership: UserInfoCard) => {\r\n  localStorage.setItem(\r\n    DESTINY_MEMBERSHIP_STORAGE_KEY,\r\n    JSON.stringify(membership)\r\n  );\r\n};\r\n\r\nexport const auth = async () => {\r\n  const queryParams = new URLSearchParams(window.location.search);\r\n  const authCode = queryParams.get(\"code\");\r\n\r\n  if (authCode && !hasValidAuth()) {\r\n    console.log(\"Fetching access token with auth code\");\r\n    await fetchAuthToken(authCode);\r\n  }\r\n\r\n  if (authCode) {\r\n    window.location.replace(\r\n      `${window.location.origin}${window.location.pathname}`\r\n    );\r\n  }\r\n\r\n  if (hasValidAuth() && hasDestinyMemberships()) {\r\n    return true;\r\n  }\r\n\r\n  console.log(\r\n    \"Redirecting to fresh authentication for missing or expired access token, or missing destiny memberships\"\r\n  );\r\n  clearStorage();\r\n  redirectToAuth();\r\n};\r\n","export const ITEM_SLOT_KINETIC = \"kinetic\";\r\nexport const ITEM_SLOT_ENERGY = \"energy\";\r\nexport const ITEM_SLOT_POWER = \"power\";\r\nexport const ITEM_SLOT_HEAD = \"head\";\r\nexport const ITEM_SLOT_GLOVES = \"gloves\";\r\nexport const ITEM_SLOT_CHEST = \"chest\";\r\nexport const ITEM_SLOT_LEGS = \"legs\";\r\nexport const ITEM_SLOT_CLASS_ITEM = \"classItem\";\r\n\r\nexport const ITEM_SLOT_BUCKETS = {\r\n  [ITEM_SLOT_KINETIC]: 1498876634,\r\n  [ITEM_SLOT_ENERGY]: 2465295065,\r\n  [ITEM_SLOT_POWER]: 953998645,\r\n  [ITEM_SLOT_HEAD]: 3448274439,\r\n  [ITEM_SLOT_GLOVES]: 3551918588,\r\n  [ITEM_SLOT_CHEST]: 14239492,\r\n  [ITEM_SLOT_LEGS]: 20886954,\r\n  [ITEM_SLOT_CLASS_ITEM]: 1585787867\r\n};\r\n\r\nexport const ITEM_BUCKET_SLOTS = Object.entries(ITEM_SLOT_BUCKETS).reduce(\r\n  (buckets, [slot, bucket]) => ({ ...buckets, [bucket]: slot }),\r\n  {} as { [bucket: number]: string }\r\n);\r\n\r\nexport const ITEM_SLOT_GROUP_WEAPONS = [\r\n  ITEM_SLOT_KINETIC,\r\n  ITEM_SLOT_ENERGY,\r\n  ITEM_SLOT_POWER\r\n];\r\nexport const ITEM_SLOT_GROUP_ARMOR = [\r\n  ITEM_SLOT_HEAD,\r\n  ITEM_SLOT_GLOVES,\r\n  ITEM_SLOT_CHEST,\r\n  ITEM_SLOT_LEGS,\r\n  ITEM_SLOT_CLASS_ITEM\r\n];\r\n\r\nexport const ORDERED_ITEM_SLOTS = [\r\n  ...ITEM_SLOT_GROUP_WEAPONS,\r\n  ...ITEM_SLOT_GROUP_ARMOR\r\n];\r\n\r\nexport const ITEM_TIER_TYPE_EXOTIC = 6;\r\n\r\nexport const ITEM_TYPE_ARMOR = 2;\r\nexport const ITEM_TYPE_WEAPON = 3;\r\n\r\nexport const CLASS_TYPE_ALL = 3;\r\n\r\nexport const CLASS_TITAN = \"titan\";\r\nexport const CLASS_HUNTER = \"hunter\";\r\nexport const CLASS_WARLOCK = \"warlock\";\r\n\r\nexport const CLASS_NAMES = [CLASS_TITAN, CLASS_HUNTER, CLASS_WARLOCK];\r\n","import classnames from \"classnames\";\r\nimport React from \"react\";\r\n\r\nimport { CharacterData } from \"../types\";\r\n\r\nimport { ORDERED_ITEM_SLOTS } from \"../constants\";\r\nimport STYLES from \"./CharacterDisplay.module.scss\";\r\n\r\ninterface CharacterDisplayProps {\r\n  data: CharacterData;\r\n}\r\n\r\nconst titleCase = (text: string) =>\r\n  text.substr(0, 1).toUpperCase() + text.substr(1);\r\n\r\ninterface BarProps {\r\n  min: number;\r\n  max: number;\r\n  value: number;\r\n  avgValue: number;\r\n  label: string;\r\n  icon?: string;\r\n}\r\nconst Bar = ({ min, max, value, avgValue, label, icon }: BarProps) => {\r\n  const range = max - min;\r\n  const perc = Math.floor(((value - min) / range) * 1000) / 10;\r\n  const avgPerc = Math.floor(((avgValue - min) / range) * 1000) / 10;\r\n  // const plusTwoPerc = Math.floor(((avgValue + 2 - min) / range) * 1000) / 10\r\n  // const plusFivePerc = Math.floor(((avgValue + 5 - min) / range) * 1000) / 10\r\n  return (\r\n    <div className={STYLES.barWrapper}>\r\n      <div className={STYLES.iconWrapper}>\r\n        {icon && (\r\n          <img\r\n            className={STYLES.icon}\r\n            src={`https://www.bungie.net${icon}`}\r\n            alt={label}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className={STYLES.barContainer}>\r\n        <div className={STYLES.filledBar} style={{ width: `${perc}%` }}>\r\n          <span>{label}</span>\r\n        </div>\r\n        <div className={STYLES.barLine} style={{ left: `${avgPerc}%` }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CharacterDisplay = ({ data }: CharacterDisplayProps) => {\r\n  const classItemNames: { [key: string]: string } = {\r\n    hunter: \"Hunter Cloak\",\r\n    titan: \"Titan Mark\",\r\n    warlock: \"Warlock Bond\"\r\n  };\r\n  const slotFullNames: { [key: string]: string } = {\r\n    chest: \"Chest Armor\",\r\n    classItem: classItemNames[data.className],\r\n    energy: \"Energy Weapon\",\r\n    gloves: \"Gauntlets\",\r\n    head: \"Helmet\",\r\n    kinetic: \"Kinetic Weapon\",\r\n    legs: \"Leg Armor\",\r\n    power: \"Power Weapon\"\r\n  };\r\n\r\n  const rgbString = ({\r\n    red,\r\n    green,\r\n    blue\r\n  }: {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n  }) => `rgb(${red},${green},${blue})`;\r\n\r\n  interface PowerBySlot {\r\n    [slotName: string]: number;\r\n  }\r\n\r\n  // Get power by slot, using overall power if slot data does not exist\r\n  const powerBySlot = ORDERED_ITEM_SLOTS.reduce(\r\n    (slots, slotName) => ({\r\n      ...slots,\r\n      [slotName]: data.topItemBySlot\r\n        ? data.topItemBySlot[slotName].instanceData.primaryStat.value\r\n        : data.overallPower\r\n    }),\r\n    {} as PowerBySlot\r\n  );\r\n\r\n  // Round to 50s\r\n  const minItemPower = Math.min(...Object.values(powerBySlot));\r\n  const minPowerToDisplay = Math.max(\r\n    Math.floor(minItemPower / 50) * 50 - 50,\r\n    0\r\n  );\r\n  const maxItemPower = Math.max(...Object.values(powerBySlot));\r\n  const maxPowerToDisplay = Math.min(Math.ceil(maxItemPower / 50) * 50, 750);\r\n\r\n  const roundedPower = Math.floor(data.overallPower);\r\n\r\n  const range = maxPowerToDisplay - minPowerToDisplay;\r\n  const perc =\r\n    Math.floor(((roundedPower - minPowerToDisplay) / range) * 1000) / 10;\r\n\r\n  return (\r\n    <div\r\n      className={classnames(\r\n        STYLES.characterDisplay,\r\n        STYLES[`class_${data.className}`]\r\n      )}\r\n      style={{ backgroundColor: rgbString(data.character.emblemColor) }}\r\n    >\r\n      <div className={STYLES.header}>\r\n        <img\r\n          className={STYLES.emblemBackground}\r\n          src={`https://www.bungie.net${data.character.emblemBackgroundPath}`}\r\n          alt=\"\"\r\n        />\r\n        <div className={STYLES.name}>{titleCase(data.className)}</div>\r\n        <div className={STYLES.power}>{roundedPower}</div>\r\n      </div>\r\n      <div className={STYLES.powerBars}>\r\n        <div className={STYLES.powerRange}>\r\n          <div className={STYLES.minPower}>{minPowerToDisplay}</div>\r\n          <div className={STYLES.rangeLine} />\r\n          <div className={STYLES.maxPower}>{maxPowerToDisplay}</div>\r\n        </div>\r\n        <div className={STYLES.bars}>\r\n          {Object.entries(powerBySlot).map(([slotName, power]) => {\r\n            const bestItem = data.topItemBySlot && data.topItemBySlot[slotName];\r\n            return (\r\n              <Bar\r\n                key={`${data.id}_${slotName}`}\r\n                min={minPowerToDisplay}\r\n                max={maxPowerToDisplay}\r\n                value={power}\r\n                avgValue={roundedPower}\r\n                label={`${power} ${slotFullNames[slotName] || slotName}`}\r\n                icon={\r\n                  bestItem &&\r\n                  bestItem.itemDefinition &&\r\n                  bestItem.itemDefinition.displayProperties.icon\r\n                }\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <div className={STYLES.powerLabel}>\r\n          <div className={STYLES.indicator} style={{ left: `${perc}%` }}>\r\n            {roundedPower}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterDisplay;\r\n","import React from \"react\";\n\nimport STYLES from \"./LoadingSpinner.module.scss\";\n\ninterface LoadingSpinnerProps {\n  status: string;\n}\n\nconst LoadingSpinner = ({ status }: LoadingSpinnerProps) => {\n  return (\n    <div className={STYLES.loadingSpinnerContainer}>\n      <div className={STYLES.anchor}>\n        <div className={STYLES.spinnerLarge} />\n        <div className={STYLES.spinnerSmall} />\n        <div className={STYLES.status}>{status}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import { UserInfoCard } from \"bungie-api-ts/user\";\nimport classnames from \"classnames\";\nimport React from \"react\";\n\nimport { getDestinyMemberships } from \"../services/bungie-auth\";\nimport STYLES from \"./MembershipSelect.module.scss\";\n\ninterface MembershipSelectProps {\n  onMembershipSelect: (membership: UserInfoCard) => any;\n}\n\nconst MembershipSelect = ({ onMembershipSelect }: MembershipSelectProps) => {\n  const destinyMemberships = getDestinyMemberships();\n\n  if (!destinyMemberships) {\n    return null;\n  }\n\n  if (destinyMemberships.length === 0) {\n    return <div>No destiny memberships!</div>;\n  }\n\n  const PLATFORMS: { [key: number]: string } = {\n    1: \"xbox\",\n    2: \"psn\",\n    4: \"blizzard\"\n  };\n\n  return (\n    <div className={STYLES.membershipSelect}>\n      {destinyMemberships.map(m => {\n        return (\n          <div\n            key={m.membershipId}\n            className={classnames(\n              STYLES.membership,\n              STYLES[`platform_${PLATFORMS[m.membershipType]}`]\n            )}\n            onClick={() => onMembershipSelect(m)}\n          >\n            {m.displayName}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default MembershipSelect;\n","import {\r\n  DestinyCharacterComponent,\r\n  DestinyItemComponent\r\n} from \"bungie-api-ts/destiny2\";\r\n\r\nimport forIn from \"lodash/forIn\";\r\nimport groupBy from \"lodash/groupBy\";\r\nimport mapValues from \"lodash/mapValues\";\r\nimport maxBy from \"lodash/maxBy\";\r\nimport sumBy from \"lodash/sumBy\";\r\n\r\nimport {\r\n  CLASS_NAMES,\r\n  CLASS_TYPE_ALL,\r\n  ITEM_BUCKET_SLOTS,\r\n  ITEM_SLOT_BUCKETS,\r\n  ITEM_TYPE_ARMOR,\r\n  ITEM_TYPE_WEAPON\r\n} from \"../constants\";\r\nimport {\r\n  CharacterData,\r\n  ItemBySlot,\r\n  JoinedItemDefinition,\r\n  PowerBySlot\r\n} from \"../types\";\r\nimport { getBasicProfile, getFullProfile, getManifest } from \"./bungie-api\";\r\nimport { auth, getSelectedDestinyMembership } from \"./bungie-auth\";\r\n\r\nconst getPowerBySlot = (itemsBySlot: ItemBySlot): PowerBySlot =>\r\n  mapValues(itemsBySlot, item => item.instanceData.primaryStat.value);\r\n\r\nconst getOverallPower = (powerBySlot: PowerBySlot) =>\r\n  Object.values(powerBySlot).reduce((sum, power) => sum + power, 0) /\r\n  Object.keys(ITEM_SLOT_BUCKETS).length;\r\n\r\nconst mergeItems = <\r\n  T extends { [key: string]: { items: DestinyItemComponent[] } }\r\n>(\r\n  characterItemMap: T\r\n) => {\r\n  return Object.values(characterItemMap).reduce(\r\n    (allItems, characterItems) => allItems.concat(characterItems.items),\r\n    [] as DestinyItemComponent[]\r\n  );\r\n};\r\n\r\nconst isItemEquippableByCharacter = (\r\n  item: JoinedItemDefinition,\r\n  character: DestinyCharacterComponent\r\n) => {\r\n  if (!item.instanceData) {\r\n    return false;\r\n  }\r\n  if (item.instanceData.canEquip) {\r\n    return true;\r\n  } // If the game says we can equip it, let's believe it\r\n  if (item.instanceData.cannotEquipReason === 16) {\r\n    return true;\r\n  } // Only reason is that it's in your vault\r\n  if (item.instanceData.equipRequiredLevel > character.baseCharacterLevel) {\r\n    return false;\r\n  }\r\n  // Let's ignore the rest for now\r\n  return true;\r\n};\r\n\r\nconst getBasicCharacterData = async (\r\n  pendingBasicProfile: ReturnType<typeof getBasicProfile>\r\n) => {\r\n  const profile = await pendingBasicProfile;\r\n  if (!profile || !profile.Response || !profile.Response.characters) {\r\n    return;\r\n  }\r\n  const characters = profile.Response.characters.data;\r\n\r\n  if (characters) {\r\n    const getDataForCharacterId = (id: string): CharacterData => {\r\n      const character = characters[id];\r\n      const className = CLASS_NAMES[character.classType];\r\n      return {\r\n        character,\r\n        className,\r\n        id,\r\n        overallPower: character.light\r\n      };\r\n    };\r\n\r\n    const characterIds = Object.keys(characters);\r\n    const characterData = characterIds.map(id => getDataForCharacterId(id));\r\n    return characterData;\r\n  }\r\n};\r\n\r\nexport const getCharacterData = async (\r\n  setCharacterData: (state: CharacterData[]) => any,\r\n  setIsFetchingCharacterData: (state: boolean) => any,\r\n  returnBasicCharacterData: boolean = false\r\n) => {\r\n  try {\r\n    const isAuthed = await auth();\r\n    if (!isAuthed) {\r\n      return;\r\n    }\r\n\r\n    const pendingManifest = getManifest();\r\n\r\n    setIsFetchingCharacterData(true);\r\n\r\n    const destinyMembership = getSelectedDestinyMembership();\r\n    if (!destinyMembership) {\r\n      return;\r\n    }\r\n\r\n    let pendingBasicProfile: ReturnType<typeof getBasicProfile> | undefined;\r\n\r\n    // Flag lets this be disabled to prevent setting after full profile is returned\r\n    let shouldSetBasicCharacterData = true;\r\n    // Produce basic data if flag is set\r\n    if (returnBasicCharacterData) {\r\n      pendingBasicProfile = getBasicProfile(\r\n        destinyMembership.membershipType,\r\n        destinyMembership.membershipId\r\n      );\r\n      pendingBasicProfile.catch(() => {\r\n        /* Do nothing */\r\n      });\r\n      const pendingBasicCharacterData = getBasicCharacterData(\r\n        pendingBasicProfile\r\n      ).catch(e => {\r\n        /* Do nothing */\r\n      });\r\n      (async () => {\r\n        const basicCharacterData = await pendingBasicCharacterData;\r\n        if (basicCharacterData && shouldSetBasicCharacterData) {\r\n          setCharacterData(basicCharacterData);\r\n        }\r\n      })();\r\n    }\r\n\r\n    const fullProfile = await getFullProfile(\r\n      destinyMembership.membershipType,\r\n      destinyMembership.membershipId\r\n    );\r\n    setIsFetchingCharacterData(false);\r\n\r\n    if (\r\n      !fullProfile ||\r\n      !fullProfile.Response ||\r\n      !fullProfile.Response.characters ||\r\n      !fullProfile.Response.characters.data ||\r\n      !fullProfile.Response.characterEquipment ||\r\n      !fullProfile.Response.characterEquipment.data ||\r\n      !fullProfile.Response.characterInventories ||\r\n      !fullProfile.Response.characterInventories.data ||\r\n      !fullProfile.Response.profileInventory ||\r\n      !fullProfile.Response.profileInventory.data ||\r\n      !fullProfile.Response.itemComponents ||\r\n      !fullProfile.Response.itemComponents.instances ||\r\n      !fullProfile.Response.itemComponents.instances.data\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const characters = fullProfile.Response.characters.data;\r\n    const characterEquipments = fullProfile.Response.characterEquipment.data;\r\n    const characterInventories = fullProfile.Response.characterInventories.data;\r\n    const profileInventories = fullProfile.Response.profileInventory.data;\r\n    const itemInstances = fullProfile.Response.itemComponents.instances.data;\r\n\r\n    const manifest = await pendingManifest;\r\n\r\n    if (!manifest) {\r\n      return;\r\n    }\r\n\r\n    const allCharacterItems = mergeItems(characterInventories)\r\n      .concat(mergeItems(characterEquipments))\r\n      .concat(profileInventories.items);\r\n    const allCharacterWeapons = allCharacterItems.filter(i => {\r\n      const itemDefinition =\r\n        i.itemHash && manifest.DestinyInventoryItemDefinition[i.itemHash];\r\n      return itemDefinition && itemDefinition.itemType === ITEM_TYPE_WEAPON;\r\n    });\r\n\r\n    const getDataForCharacterId = (id: string): CharacterData => {\r\n      const character = characters[id];\r\n      const className = CLASS_NAMES[character.classType];\r\n\r\n      const mapAndFilterItems = (\r\n        items: DestinyItemComponent[]\r\n      ): JoinedItemDefinition[] =>\r\n        items\r\n          .map(item => {\r\n            const instanceData = item.itemInstanceId\r\n              ? itemInstances[item.itemInstanceId]\r\n              : undefined;\r\n            const itemDefinition =\r\n              manifest.DestinyInventoryItemDefinition[item.itemHash];\r\n            return {\r\n              ...item,\r\n              instanceData,\r\n              itemDefinition\r\n            };\r\n          })\r\n          .filter(\r\n            i =>\r\n              i.instanceData &&\r\n              i.itemDefinition &&\r\n              [ITEM_TYPE_ARMOR, ITEM_TYPE_WEAPON].includes(\r\n                i.itemDefinition.itemType\r\n              )\r\n          )\r\n          .map(i => ({\r\n            ...i,\r\n            instanceData: i.instanceData!,\r\n            itemDefinition: i.itemDefinition!\r\n          }))\r\n          .map(i => ({\r\n            ...i,\r\n            slotName:\r\n              ITEM_BUCKET_SLOTS[i.itemDefinition.inventory.bucketTypeHash]\r\n          }))\r\n          .filter(i => isItemEquippableByCharacter(i, character));\r\n\r\n      const characterItems = mapAndFilterItems(\r\n        characterInventories[id].items\r\n          .concat(characterEquipments[id].items)\r\n          .concat(allCharacterWeapons)\r\n      );\r\n      const relevantProfileItems = mapAndFilterItems(\r\n        profileInventories.items\r\n      ).filter(\r\n        i =>\r\n          i.itemDefinition &&\r\n          (i.itemDefinition.classType === CLASS_TYPE_ALL ||\r\n            i.itemDefinition.classType === character.classType)\r\n      );\r\n\r\n      const allItems = characterItems.concat(relevantProfileItems);\r\n\r\n      const getItemScore = (item: JoinedItemDefinition) => {\r\n        let score = item.instanceData.primaryStat.value;\r\n        if (item.instanceData.isEquipped) {\r\n          score += 0.1;\r\n        }\r\n        if (item.location === 1) {\r\n          score += 0.05;\r\n        }\r\n        return score;\r\n      };\r\n\r\n      const getEquipLabel = (item: JoinedItemDefinition) =>\r\n        item.itemDefinition.equippingBlock.uniqueLabel;\r\n\r\n      // Group by slot\r\n      const itemsBySlot = groupBy(allItems, i => i.slotName);\r\n      // Get max power items per slot\r\n      let topItemBySlot = mapValues(\r\n        itemsBySlot,\r\n        items => maxBy(items, getItemScore)!\r\n      );\r\n      // Get overlaps by equip label\r\n      const uniqueEquippedGroups = groupBy(\r\n        Object.values(topItemBySlot).filter(getEquipLabel),\r\n        getEquipLabel\r\n      );\r\n      // For overlaps with more than one item, generate valid options where all-but-one item is swapped for the next best non-exotic\r\n      forIn(uniqueEquippedGroups, uniqueEquippedGroup => {\r\n        if (uniqueEquippedGroup.length <= 1) {\r\n          return;\r\n        }\r\n\r\n        const validItemCombinations: ItemBySlot[] = [];\r\n\r\n        uniqueEquippedGroup.forEach(item => {\r\n          const otherItems = uniqueEquippedGroup.filter(\r\n            otherItem => otherItem !== item\r\n          );\r\n          let isCombinationValid = true;\r\n          const combination = { ...topItemBySlot };\r\n          otherItems.forEach(otherItem => {\r\n            // Find non-exotics for this slot\r\n            const nonExotics = itemsBySlot[otherItem.slotName].filter(\r\n              i => !getEquipLabel(i)\r\n            );\r\n            if (nonExotics.length > 0) {\r\n              // Select max power from non-exotics\r\n              combination[otherItem.slotName] = maxBy(\r\n                nonExotics,\r\n                getItemScore\r\n              )!;\r\n            } else {\r\n              // No non-exotic options for this slot, so whole combination is invalidaa\r\n              isCombinationValid = false;\r\n            }\r\n          });\r\n          if (isCombinationValid) {\r\n            validItemCombinations.push(combination);\r\n          }\r\n        });\r\n\r\n        // Select highest total scoring valid combination, if alternative item combinations have been generated\r\n        if (validItemCombinations.length > 0) {\r\n          const bestCombination = maxBy(validItemCombinations, combination =>\r\n            sumBy(Object.values(combination), getItemScore)\r\n          )!;\r\n          topItemBySlot = bestCombination;\r\n        }\r\n      });\r\n\r\n      const powerBySlot = getPowerBySlot(topItemBySlot);\r\n      const overallPower = getOverallPower(powerBySlot);\r\n\r\n      return {\r\n        character,\r\n        className,\r\n        id,\r\n        overallPower,\r\n        topItemBySlot\r\n      };\r\n    };\r\n\r\n    const characterIds = Object.keys(characters);\r\n    const characterData = characterIds.map(id => getDataForCharacterId(id));\r\n    shouldSetBasicCharacterData = false;\r\n    setCharacterData(characterData);\r\n  } catch (e) {\r\n    console.error(`Error fetching manifest and character data`, e);\r\n    setIsFetchingCharacterData(false);\r\n    return;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"characterDisplay\":\"CharacterDisplay_characterDisplay__3LJ6S\",\"header\":\"CharacterDisplay_header__16L7B\",\"emblemBackground\":\"CharacterDisplay_emblemBackground__2jqgs\",\"name\":\"CharacterDisplay_name__3Aw12\",\"power\":\"CharacterDisplay_power__EMI5z\",\"powerBars\":\"CharacterDisplay_powerBars__1ncJP\",\"powerRange\":\"CharacterDisplay_powerRange__lEkeP\",\"rangeLine\":\"CharacterDisplay_rangeLine__14_WH\",\"powerLabel\":\"CharacterDisplay_powerLabel__36Pf6\",\"indicator\":\"CharacterDisplay_indicator__2jPQU\",\"barWrapper\":\"CharacterDisplay_barWrapper__3qGoQ\",\"iconWrapper\":\"CharacterDisplay_iconWrapper__1CafS\",\"icon\":\"CharacterDisplay_icon__3v2oB\",\"barContainer\":\"CharacterDisplay_barContainer__btRVR\",\"barLine\":\"CharacterDisplay_barLine__V3SXF\",\"filledBar\":\"CharacterDisplay_filledBar__2r5Ry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"membershipSelect\":\"MembershipSelect_membershipSelect__vf_ZG\",\"membership\":\"MembershipSelect_membership__RaveC\",\"platform_blizzard\":\"MembershipSelect_platform_blizzard__1OiG6\",\"platform_psn\":\"MembershipSelect_platform_psn__WN9gB\",\"platform_xbox\":\"MembershipSelect_platform_xbox__1ZAgU\"};"],"sourceRoot":""}