{"version":3,"sources":["../node_modules/dom-to-image/src/dom-to-image.js"],"names":["global","util","escape","string","replace","parseExtension","mimeType","url","extension","toLowerCase","WOFF","mimes","dataAsUrl","content","type","isDataUrl","search","canvasToBlob","canvas","toBlob","Promise","resolve","binaryString","window","atob","toDataURL","split","length","binaryArray","Uint8Array","i","charCodeAt","Blob","resolveUrl","baseUrl","doc","document","implementation","createHTMLDocument","base","createElement","head","appendChild","a","body","href","getAndEncode","domtoimage","impl","options","cacheBust","test","Date","getTime","placeholder","request","XMLHttpRequest","onreadystatechange","readyState","status","fail","encoder","FileReader","onloadend","result","readAsDataURL","response","ontimeout","responseType","timeout","open","send","imagePlaceholder","message","console","error","uid","index","Math","random","pow","toString","slice","delay","ms","arg","setTimeout","asArray","arrayLike","array","push","escapeXhtml","makeImage","uri","reject","image","Image","onload","onerror","src","width","node","leftBorder","px","rightBorder","scrollWidth","height","topBorder","bottomBorder","scrollHeight","match","exec","styleProperty","value","getComputedStyle","getPropertyValue","parseFloat","newUtil","inliner","URL_REGEX","inlineAll","get","shouldProcess","nothingToInline","then","readUrls","urls","done","forEach","inline","filter","data","dataUrl","RegExp","urlAsRegex","newInliner","fontFaces","resolveAll","readAll","webFonts","all","map","webFont","cssStrings","join","styleSheets","cssRules","sheet","bind","e","log","rule","CSSRule","FONT_FACE_RULE","style","rules","newWebFont","webFontRule","parentStyleSheet","cssText","newFontFaces","images","Element","background","inlined","setProperty","getPropertyPriority","inlineBackground","HTMLImageElement","newImage","childNodes","child","element","newImages","defaultOptions","undefined","toSvg","toPng","draw","toJpeg","quality","toPixelData","getContext","getImageData","copyOptions","cloneNode","root","HTMLCanvasElement","clone","cloneChildren","original","cloneStyle","clonePseudoElements","copyUserInput","fixSvg","source","target","name","copyProperties","className","styleElement","selector","formatCssText","formatCssProperties","createTextNode","formatPseudoElementStyle","clonePseudoElement","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","SVGElement","SVGRectElement","attribute","getAttribute","processClone","children","cloneChildrenInOrder","parent","childClone","embedFonts","inlineImages","bgcolor","backgroundColor","Object","keys","property","XMLSerializer","serializeToString","xhtml","foreignObject","svg","makeSvgDataUri","domNode","ctx","fillStyle","fillRect","newCanvas","drawImage","styleNode","module","exports"],"mappings":"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","file":"static/js/dom-to-image.13db2bc5.chunk.js","sourcesContent":["(function (global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof module !== 'undefined')\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n                defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n            .then(function (node) {\n                return cloneNode(node, options.filter, true);\n            })\n            .then(embedFonts)\n            .then(inlineImages)\n            .then(applyOptions)\n            .then(function (clone) {\n                return makeSvgDataUri(clone,\n                    options.width || util.width(node),\n                    options.height || util.height(node)\n                );\n            });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function (property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.getContext('2d').getImageData(\n                    0,\n                    0,\n                    util.width(node),\n                    util.height(node)\n                ).data;\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.toDataURL();\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n            .then(function (canvas) {\n                return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n            .then(util.canvasToBlob);\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if(typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if(typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n            .then(util.makeImage)\n            .then(util.delay(100))\n            .then(function (image) {\n                var canvas = newCanvas(domNode);\n                canvas.getContext('2d').drawImage(image, 0, 0);\n                return canvas;\n            });\n\n        function newCanvas(domNode) {\n            var canvas = document.createElement('canvas');\n            canvas.width = options.width || util.width(domNode);\n            canvas.height = options.height || util.height(domNode);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n            .then(makeNodeCopy)\n            .then(function (clone) {\n                return cloneChildren(node, clone, filter);\n            })\n            .then(function (clone) {\n                return processClone(node, clone);\n            });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function (child) {\n                    done = done\n                        .then(function () {\n                            return cloneNode(child, filter);\n                        })\n                        .then(function (childClone) {\n                            if (childClone) parent.appendChild(childClone);\n                        });\n                });\n                return done;\n            }\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n                .then(cloneStyle)\n                .then(clonePseudoElements)\n                .then(copyUserInput)\n                .then(fixSvg)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                function copyStyle(source, target) {\n                    if (source.cssText) target.cssText = source.cssText;\n                    else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function (name) {\n                            target.setProperty(\n                                name,\n                                source.getPropertyValue(name),\n                                source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function (element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    clone.className = clone.className + ' ' + className;\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                                .map(formatProperty)\n                                .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                    style.getPropertyValue(name) +\n                                    (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function (attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n            .then(function (cssText) {\n                var styleNode = document.createElement('style');\n                node.appendChild(styleNode);\n                styleNode.appendChild(document.createTextNode(cssText));\n                return node;\n            });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n            .then(function () {\n                return node;\n            });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n            .then(function (node) {\n                node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n                return new XMLSerializer().serializeToString(node);\n            })\n            .then(util.escapeXhtml)\n            .then(function (xhtml) {\n                return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n            })\n            .then(function (foreignObject) {\n                return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n                    foreignObject + '</svg>';\n            })\n            .then(function (svg) {\n                return 'data:image/svg+xml;charset=utf-8,' + svg;\n            });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function (resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function (resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function () {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if(domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function (resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if(domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if(split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if(placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function () {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if(placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function delay(ms) {\n            return function (arg) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function (url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n                .then(function (url) {\n                    return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n                })\n                .then(get || util.getAndEncode)\n                .then(function (data) {\n                    return util.dataAsUrl(data, util.mimeType(url));\n                })\n                .then(function (dataUrl) {\n                    return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n                });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n                .then(readUrls)\n                .then(function (urls) {\n                    var done = Promise.resolve(string);\n                    urls.forEach(function (url) {\n                        done = done.then(function (string) {\n                            return inline(string, url, baseUrl, get);\n                        });\n                    });\n                    return done;\n                });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n                .then(function (webFonts) {\n                    return Promise.all(\n                        webFonts.map(function (webFont) {\n                            return webFont.resolve();\n                        })\n                    );\n                })\n                .then(function (cssStrings) {\n                    return cssStrings.join('\\n');\n                });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n                .then(getCssRules)\n                .then(selectWebFontRules)\n                .then(function (rules) {\n                    return rules.map(newWebFont);\n                });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                    .filter(function (rule) {\n                        return rule.type === CSSRule.FONT_FACE_RULE;\n                    })\n                    .filter(function (rule) {\n                        return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                    });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function (sheet) {\n                    try {\n                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                    } catch (e) {\n                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function () {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                    .then(get || util.getAndEncode)\n                    .then(function (data) {\n                        return util.dataAsUrl(data, util.mimeType(element.src));\n                    })\n                    .then(function (dataUrl) {\n                        return new Promise(function (resolve, reject) {\n                            element.onload = resolve;\n                            element.onerror = reject;\n                            element.src = dataUrl;\n                        });\n                    });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n                .then(function () {\n                    if (node instanceof HTMLImageElement)\n                        return newImage(node).inline();\n                    else\n                        return Promise.all(\n                            util.asArray(node.childNodes).map(function (child) {\n                                return inlineAll(child);\n                            })\n                        );\n                });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                    .then(function (inlined) {\n                        node.style.setProperty(\n                            'background',\n                            inlined,\n                            node.style.getPropertyPriority('background')\n                        );\n                    })\n                    .then(function () {\n                        return node;\n                    });\n            }\n        }\n    }\n})(this);\n"],"sourceRoot":""}